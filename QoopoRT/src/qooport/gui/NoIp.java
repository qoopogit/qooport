/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qooport.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import qooport.utilidades.NoIpService;
import qooport.utilidades.Util;

/**
 *
 * @author aigarcia
 */
public class NoIp extends javax.swing.JPanel {

    private JPopupMenu jPopupMenu1;
    private JMenuItem ipcustom;
    private JMenuItem ipexterna;

    private boolean hiloNoIp;

    public void ipexternaActionPerformed(ActionEvent evt) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                NoIpService m = new NoIpService(txtNoIpUsuario.getText(), new String(txtNoIpPass.getPassword()));
                int indice = tablaNoIp.getSelectedRow();
                String re = m.actualiza(tablaNoIp.getValueAt(indice, 0).toString(), "");
                tablaNoIp.setValueAt(re, indice, 1);
            }
        }).start();
    }

    public void ipcustomActionPerformed(ActionEvent evt) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                String ips = JOptionPane.showInputDialog("Escribe una dirección ip:\nEjemplo: 127.0.0.1 o 129.34.5.2");
                NoIpService m = new NoIpService(txtNoIpUsuario.getText(), new String(txtNoIpPass.getPassword()));
                String re = m.actualiza(tablaNoIp.getValueAt(tablaNoIp.getSelectedRow(), 0).toString(), ips);
                tablaNoIp.setValueAt(re, tablaNoIp.getSelectedRow(), 1);
            }
        }).start();
    }

    /**
     * Creates new form NoIp
     */
    public NoIp() {
        initComponents();

        this.jPopupMenu1 = new JPopupMenu();
        this.jPopupMenu1.setLabel("Opciones No-Ip");
        this.ipexterna = new JMenuItem();
        this.ipcustom = new JMenuItem();
        this.ipexterna.setText("IP Externa");
        this.ipexterna.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                ipexternaActionPerformed(evt);
            }
        });
        this.jPopupMenu1.add(this.ipexterna);
        this.ipcustom.setText("Ip Personalizada");
        this.ipcustom.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                ipcustomActionPerformed(evt);
            }
        });
        this.jPopupMenu1.add(this.ipcustom);

        tablaNoIp.setShowGrid(false);
        this.tablaNoIp.setModel(new DefaultTableModel(new Object[0][], new String[]{"DNS", "Estado"}));
        this.tablaNoIp.setComponentPopupMenu(this.jPopupMenu1);
        this.tablaNoIp.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
//                Herramientas.this.tablaMousePressed(evt);
            }
        });

        lblTitulo.setIcon(Util.cargarIcono32("/resources/noip.png"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        txtNoIpUsuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNoIpPass = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaNoIp = new javax.swing.JTable();
        btnNoIpListarDNS = new javax.swing.JButton();
        btnActualizarIpExterna = new javax.swing.JButton();
        lblEstadoNoIp = new javax.swing.JLabel();
        btnActIPExt = new javax.swing.JButton();

        lblTitulo.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        lblTitulo.setText("NoIP");

        jLabel1.setText("Usuario:");

        jLabel2.setText("Contraseña:");

        tablaNoIp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaNoIp);

        btnNoIpListarDNS.setText("Listar");
        btnNoIpListarDNS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoIpListarDNSActionPerformed(evt);
            }
        });

        btnActualizarIpExterna.setText("Iniciar actualizador");
        btnActualizarIpExterna.setToolTipText("Inicia/Detiene un proceso que actualiza cada 30 minutos los dns con la ip externa.");
        btnActualizarIpExterna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarIpExternaActionPerformed(evt);
            }
        });

        lblEstadoNoIp.setText("Listo");

        btnActIPExt.setText("Actualizar Ip Externa");
        btnActIPExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActIPExtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(216, 216, 216))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNoIpUsuario)
                            .addComponent(txtNoIpPass))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnNoIpListarDNS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnActIPExt, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnActualizarIpExterna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEstadoNoIp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNoIpUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNoIpPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNoIpListarDNS)
                    .addComponent(lblEstadoNoIp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActIPExt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnActualizarIpExterna)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNoIpListarDNSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoIpListarDNSActionPerformed
        new Thread(new Runnable() {
            @Override
            public void run() {
                DefaultTableModel t = (DefaultTableModel) tablaNoIp.getModel();
                NoIpService no = new NoIpService(txtNoIpUsuario.getText(), new String(txtNoIpPass.getPassword()));
                String[] dns;
                lblEstadoNoIp.setText("Pidiendo lista de dns..");
//                cliente.ponerEstado("Actualizador NO-IP: Pidiendo lista de dns");
                if ((dns = no.listarDominios()) != null) {
                    for (int i = tablaNoIp.getRowCount() - 1; i > -1; i--) {
                        t.removeRow(i);
                    }
                    for (String p : dns) {
                        t.addRow(new String[]{p, "Sin actualizar"});
                    }
                    lblEstadoNoIp.setText("Dns listado");
//                    cliente.ponerEstado("Actualizador NO-IP: Dns listado");
                } else {
                    lblEstadoNoIp.setText("Error al iniciar sesión");
//                    cliente.ponerEstado("Actualizador NO-IP: Error al iniciar sesión");
                }
            }
        }).start();
    }//GEN-LAST:event_btnNoIpListarDNSActionPerformed

    private void actualizarIPExterna() {
        try {
            lblEstadoNoIp.setText("Actualizando dns's");
//                            cliente.ponerEstado("Actualizador NO-IP: Actualizando dns's");
            for (int i = tablaNoIp.getRowCount() - 1; i > -1; i--) {
                NoIpService m = new NoIpService(txtNoIpUsuario.getText(), new String(txtNoIpPass.getPassword()));
//                String re = m.actualiza(tablaNoIp.getValueAt(i, 0).toString(), "");
                //String re = m.actualiza2(tablaNoIp.getValueAt(i, 0).toString(), "");
                String re = m.actualiza3(tablaNoIp.getValueAt(i, 0).toString(), "");
                tablaNoIp.setValueAt(re, i, 1);
            }

//                            cliente.ponerEstado("Actualizador NO-IP: Listo");
        } catch (Exception e) {
        }
        lblEstadoNoIp.setText("Listo");
    }

    private void btnActualizarIpExternaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarIpExternaActionPerformed
        hiloNoIp = !hiloNoIp;
        if (hiloNoIp) {
            btnActualizarIpExterna.setText("Detener Actualizador");
            new Thread(new Runnable() {
                @Override
                public void run() {
                    while (hiloNoIp) {
                        actualizarIPExterna();
                        try {
                            Thread.sleep(18000000);//30 minutos
                        } catch (InterruptedException ex) {
                        }
                    }
                }
            }).start();
        } else {
            btnActualizarIpExterna.setText("Iniciar Actualizador");
            lblEstadoNoIp.setText("Actualizador detenido");
        }
    }//GEN-LAST:event_btnActualizarIpExternaActionPerformed

    private void btnActIPExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActIPExtActionPerformed
        new Thread(new Runnable() {
            @Override
            public void run() {
                actualizarIPExterna();
            }
        }).start();
    }//GEN-LAST:event_btnActIPExtActionPerformed

    public JPasswordField getTxtNoIpPass() {
        return txtNoIpPass;
    }

    public void setTxtNoIpPass(JPasswordField txtNoIpPass) {
        this.txtNoIpPass = txtNoIpPass;
    }

    public JTextField getTxtNoIpUsuario() {
        return txtNoIpUsuario;
    }

    public void setTxtNoIpUsuario(JTextField txtNoIpUsuario) {
        this.txtNoIpUsuario = txtNoIpUsuario;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActIPExt;
    private javax.swing.JButton btnActualizarIpExterna;
    private javax.swing.JButton btnNoIpListarDNS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblEstadoNoIp;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tablaNoIp;
    private javax.swing.JPasswordField txtNoIpPass;
    private javax.swing.JTextField txtNoIpUsuario;
    // End of variables declaration//GEN-END:variables
}
